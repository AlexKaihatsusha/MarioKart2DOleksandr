//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/NewInputSystem/ControlActionMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ControlActionMap: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ControlActionMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ControlActionMap"",
    ""maps"": [
        {
            ""name"": ""CarMovementPlayer1"",
            ""id"": ""769b659c-9cb8-4b3e-bb94-d2ebfbd2301b"",
            ""actions"": [
                {
                    ""name"": ""MoveForward"",
                    ""type"": ""Button"",
                    ""id"": ""b59e20c3-6c03-456f-8c5f-e2cb3242901e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Turn"",
                    ""type"": ""Button"",
                    ""id"": ""28770c33-a888-488a-9128-53246e8c0c6d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Brake"",
                    ""type"": ""Button"",
                    ""id"": ""19d80819-42bf-4de7-a0a6-acd8b871d139"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Boost"",
                    ""type"": ""Button"",
                    ""id"": ""e9bffb29-ba0c-402b-9329-2e3b20473f77"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""daa716c2-bdfa-49f6-8d37-db8dc5c4a8d5"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""a2c2e3d8-46ad-494c-b1d4-66d7e039611f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""b31d8f10-1c4c-4db3-9418-2256ec15c137"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5e3b2ad4-82b3-4718-9a17-0b7fd02d2e3f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d555b37-9365-426c-84e4-b5541f0ba1f0"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Boost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""14cce4dc-035a-4dc2-9dad-9f3c43d95375"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MoveForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CarMovementPlayer2"",
            ""id"": ""c23058ae-312c-4186-bed5-07a6a12162e4"",
            ""actions"": [
                {
                    ""name"": ""MoveForward"",
                    ""type"": ""Button"",
                    ""id"": ""8781c4dd-4f50-414b-9c93-39e39b4541af"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Turn"",
                    ""type"": ""Button"",
                    ""id"": ""9d8736db-6b44-45ad-931c-0abb6aa516f1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Brake"",
                    ""type"": ""Button"",
                    ""id"": ""4bd24ae9-a6fd-4a2e-90e5-6995e410ec7a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Boost"",
                    ""type"": ""Button"",
                    ""id"": ""86ac1ed4-42c7-431b-8b08-a0176159d805"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8d7a009a-5157-4817-abad-6ac5db2d7fc7"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MoveForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""44b6b443-1d27-44b3-9e93-24cd92f0a299"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""fd601d95-15d9-40c7-a303-73f6ffd4b7d3"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""6369f799-2b93-452f-87b2-04c1745d70c4"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d0a08052-9eb3-4ca2-ac4a-2dd8e895072e"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0c8df9dc-f3b8-47be-aba3-8ccec81c67cc"",
                    ""path"": ""<Keyboard>/rightShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Boost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // CarMovementPlayer1
        m_CarMovementPlayer1 = asset.FindActionMap("CarMovementPlayer1", throwIfNotFound: true);
        m_CarMovementPlayer1_MoveForward = m_CarMovementPlayer1.FindAction("MoveForward", throwIfNotFound: true);
        m_CarMovementPlayer1_Turn = m_CarMovementPlayer1.FindAction("Turn", throwIfNotFound: true);
        m_CarMovementPlayer1_Brake = m_CarMovementPlayer1.FindAction("Brake", throwIfNotFound: true);
        m_CarMovementPlayer1_Boost = m_CarMovementPlayer1.FindAction("Boost", throwIfNotFound: true);
        // CarMovementPlayer2
        m_CarMovementPlayer2 = asset.FindActionMap("CarMovementPlayer2", throwIfNotFound: true);
        m_CarMovementPlayer2_MoveForward = m_CarMovementPlayer2.FindAction("MoveForward", throwIfNotFound: true);
        m_CarMovementPlayer2_Turn = m_CarMovementPlayer2.FindAction("Turn", throwIfNotFound: true);
        m_CarMovementPlayer2_Brake = m_CarMovementPlayer2.FindAction("Brake", throwIfNotFound: true);
        m_CarMovementPlayer2_Boost = m_CarMovementPlayer2.FindAction("Boost", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CarMovementPlayer1
    private readonly InputActionMap m_CarMovementPlayer1;
    private List<ICarMovementPlayer1Actions> m_CarMovementPlayer1ActionsCallbackInterfaces = new List<ICarMovementPlayer1Actions>();
    private readonly InputAction m_CarMovementPlayer1_MoveForward;
    private readonly InputAction m_CarMovementPlayer1_Turn;
    private readonly InputAction m_CarMovementPlayer1_Brake;
    private readonly InputAction m_CarMovementPlayer1_Boost;
    public struct CarMovementPlayer1Actions
    {
        private @ControlActionMap m_Wrapper;
        public CarMovementPlayer1Actions(@ControlActionMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveForward => m_Wrapper.m_CarMovementPlayer1_MoveForward;
        public InputAction @Turn => m_Wrapper.m_CarMovementPlayer1_Turn;
        public InputAction @Brake => m_Wrapper.m_CarMovementPlayer1_Brake;
        public InputAction @Boost => m_Wrapper.m_CarMovementPlayer1_Boost;
        public InputActionMap Get() { return m_Wrapper.m_CarMovementPlayer1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CarMovementPlayer1Actions set) { return set.Get(); }
        public void AddCallbacks(ICarMovementPlayer1Actions instance)
        {
            if (instance == null || m_Wrapper.m_CarMovementPlayer1ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CarMovementPlayer1ActionsCallbackInterfaces.Add(instance);
            @MoveForward.started += instance.OnMoveForward;
            @MoveForward.performed += instance.OnMoveForward;
            @MoveForward.canceled += instance.OnMoveForward;
            @Turn.started += instance.OnTurn;
            @Turn.performed += instance.OnTurn;
            @Turn.canceled += instance.OnTurn;
            @Brake.started += instance.OnBrake;
            @Brake.performed += instance.OnBrake;
            @Brake.canceled += instance.OnBrake;
            @Boost.started += instance.OnBoost;
            @Boost.performed += instance.OnBoost;
            @Boost.canceled += instance.OnBoost;
        }

        private void UnregisterCallbacks(ICarMovementPlayer1Actions instance)
        {
            @MoveForward.started -= instance.OnMoveForward;
            @MoveForward.performed -= instance.OnMoveForward;
            @MoveForward.canceled -= instance.OnMoveForward;
            @Turn.started -= instance.OnTurn;
            @Turn.performed -= instance.OnTurn;
            @Turn.canceled -= instance.OnTurn;
            @Brake.started -= instance.OnBrake;
            @Brake.performed -= instance.OnBrake;
            @Brake.canceled -= instance.OnBrake;
            @Boost.started -= instance.OnBoost;
            @Boost.performed -= instance.OnBoost;
            @Boost.canceled -= instance.OnBoost;
        }

        public void RemoveCallbacks(ICarMovementPlayer1Actions instance)
        {
            if (m_Wrapper.m_CarMovementPlayer1ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICarMovementPlayer1Actions instance)
        {
            foreach (var item in m_Wrapper.m_CarMovementPlayer1ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CarMovementPlayer1ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CarMovementPlayer1Actions @CarMovementPlayer1 => new CarMovementPlayer1Actions(this);

    // CarMovementPlayer2
    private readonly InputActionMap m_CarMovementPlayer2;
    private List<ICarMovementPlayer2Actions> m_CarMovementPlayer2ActionsCallbackInterfaces = new List<ICarMovementPlayer2Actions>();
    private readonly InputAction m_CarMovementPlayer2_MoveForward;
    private readonly InputAction m_CarMovementPlayer2_Turn;
    private readonly InputAction m_CarMovementPlayer2_Brake;
    private readonly InputAction m_CarMovementPlayer2_Boost;
    public struct CarMovementPlayer2Actions
    {
        private @ControlActionMap m_Wrapper;
        public CarMovementPlayer2Actions(@ControlActionMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveForward => m_Wrapper.m_CarMovementPlayer2_MoveForward;
        public InputAction @Turn => m_Wrapper.m_CarMovementPlayer2_Turn;
        public InputAction @Brake => m_Wrapper.m_CarMovementPlayer2_Brake;
        public InputAction @Boost => m_Wrapper.m_CarMovementPlayer2_Boost;
        public InputActionMap Get() { return m_Wrapper.m_CarMovementPlayer2; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CarMovementPlayer2Actions set) { return set.Get(); }
        public void AddCallbacks(ICarMovementPlayer2Actions instance)
        {
            if (instance == null || m_Wrapper.m_CarMovementPlayer2ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CarMovementPlayer2ActionsCallbackInterfaces.Add(instance);
            @MoveForward.started += instance.OnMoveForward;
            @MoveForward.performed += instance.OnMoveForward;
            @MoveForward.canceled += instance.OnMoveForward;
            @Turn.started += instance.OnTurn;
            @Turn.performed += instance.OnTurn;
            @Turn.canceled += instance.OnTurn;
            @Brake.started += instance.OnBrake;
            @Brake.performed += instance.OnBrake;
            @Brake.canceled += instance.OnBrake;
            @Boost.started += instance.OnBoost;
            @Boost.performed += instance.OnBoost;
            @Boost.canceled += instance.OnBoost;
        }

        private void UnregisterCallbacks(ICarMovementPlayer2Actions instance)
        {
            @MoveForward.started -= instance.OnMoveForward;
            @MoveForward.performed -= instance.OnMoveForward;
            @MoveForward.canceled -= instance.OnMoveForward;
            @Turn.started -= instance.OnTurn;
            @Turn.performed -= instance.OnTurn;
            @Turn.canceled -= instance.OnTurn;
            @Brake.started -= instance.OnBrake;
            @Brake.performed -= instance.OnBrake;
            @Brake.canceled -= instance.OnBrake;
            @Boost.started -= instance.OnBoost;
            @Boost.performed -= instance.OnBoost;
            @Boost.canceled -= instance.OnBoost;
        }

        public void RemoveCallbacks(ICarMovementPlayer2Actions instance)
        {
            if (m_Wrapper.m_CarMovementPlayer2ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICarMovementPlayer2Actions instance)
        {
            foreach (var item in m_Wrapper.m_CarMovementPlayer2ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CarMovementPlayer2ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CarMovementPlayer2Actions @CarMovementPlayer2 => new CarMovementPlayer2Actions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface ICarMovementPlayer1Actions
    {
        void OnMoveForward(InputAction.CallbackContext context);
        void OnTurn(InputAction.CallbackContext context);
        void OnBrake(InputAction.CallbackContext context);
        void OnBoost(InputAction.CallbackContext context);
    }
    public interface ICarMovementPlayer2Actions
    {
        void OnMoveForward(InputAction.CallbackContext context);
        void OnTurn(InputAction.CallbackContext context);
        void OnBrake(InputAction.CallbackContext context);
        void OnBoost(InputAction.CallbackContext context);
    }
}
